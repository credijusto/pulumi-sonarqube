// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a Sonarqube portfolio resource
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sonarqube.LookupPortfolio(ctx, &sonarqube.LookupPortfolioArgs{
//				Key: "portfolio-key",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPortfolio(ctx *pulumi.Context, args *LookupPortfolioArgs, opts ...pulumi.InvokeOption) (*LookupPortfolioResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPortfolioResult
	err := ctx.Invoke("sonarqube:index/getPortfolio:getPortfolio", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPortfolio.
type LookupPortfolioArgs struct {
	// The key of the portfolio
	Key string `pulumi:"key"`
}

// A collection of values returned by getPortfolio.
type LookupPortfolioResult struct {
	// Which branch is analyzed
	Branch string `pulumi:"branch"`
	// Description of the portfolio
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The key of the portfolio
	Key string `pulumi:"key"`
	// Name of the portfolio
	Name string `pulumi:"name"`
	// `VW` (portfolios always have this qualifier)
	Qualifier string `pulumi:"qualifier"`
	// The regular expression used to populate the portfolio. Only active when `selectionMode` is `REGEXP`
	Regexp string `pulumi:"regexp"`
	// How the Portfolio is populated. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
	SelectionMode string `pulumi:"selectionMode"`
	// The list of tags used to populate the Portfolio. Only active when `selectionMode` is `TAGS`
	Tags []string `pulumi:"tags"`
	// Portfolio visibility
	Visibility string `pulumi:"visibility"`
}

func LookupPortfolioOutput(ctx *pulumi.Context, args LookupPortfolioOutputArgs, opts ...pulumi.InvokeOption) LookupPortfolioResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupPortfolioResultOutput, error) {
			args := v.(LookupPortfolioArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sonarqube:index/getPortfolio:getPortfolio", args, LookupPortfolioResultOutput{}, options).(LookupPortfolioResultOutput), nil
		}).(LookupPortfolioResultOutput)
}

// A collection of arguments for invoking getPortfolio.
type LookupPortfolioOutputArgs struct {
	// The key of the portfolio
	Key pulumi.StringInput `pulumi:"key"`
}

func (LookupPortfolioOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortfolioArgs)(nil)).Elem()
}

// A collection of values returned by getPortfolio.
type LookupPortfolioResultOutput struct{ *pulumi.OutputState }

func (LookupPortfolioResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPortfolioResult)(nil)).Elem()
}

func (o LookupPortfolioResultOutput) ToLookupPortfolioResultOutput() LookupPortfolioResultOutput {
	return o
}

func (o LookupPortfolioResultOutput) ToLookupPortfolioResultOutputWithContext(ctx context.Context) LookupPortfolioResultOutput {
	return o
}

// Which branch is analyzed
func (o LookupPortfolioResultOutput) Branch() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Branch }).(pulumi.StringOutput)
}

// Description of the portfolio
func (o LookupPortfolioResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupPortfolioResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Id }).(pulumi.StringOutput)
}

// The key of the portfolio
func (o LookupPortfolioResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Key }).(pulumi.StringOutput)
}

// Name of the portfolio
func (o LookupPortfolioResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Name }).(pulumi.StringOutput)
}

// `VW` (portfolios always have this qualifier)
func (o LookupPortfolioResultOutput) Qualifier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Qualifier }).(pulumi.StringOutput)
}

// The regular expression used to populate the portfolio. Only active when `selectionMode` is `REGEXP`
func (o LookupPortfolioResultOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Regexp }).(pulumi.StringOutput)
}

// How the Portfolio is populated. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
func (o LookupPortfolioResultOutput) SelectionMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.SelectionMode }).(pulumi.StringOutput)
}

// The list of tags used to populate the Portfolio. Only active when `selectionMode` is `TAGS`
func (o LookupPortfolioResultOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupPortfolioResult) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// Portfolio visibility
func (o LookupPortfolioResultOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPortfolioResult) string { return v.Visibility }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPortfolioResultOutput{})
}
