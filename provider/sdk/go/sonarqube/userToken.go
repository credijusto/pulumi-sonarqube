// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sonarqube

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Sonarqube User token resource. This can be used to manage Sonarqube User tokens.
//
// ## Example Usage
//
// ### Example: create a user, user token and output the token value
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			user, err := sonarqube.NewUser(ctx, "user", &sonarqube.UserArgs{
//				LoginName: pulumi.String("terraform-test"),
//				Password:  pulumi.String("secret-sauce37!"),
//			})
//			if err != nil {
//				return err
//			}
//			token, err := sonarqube.NewUserToken(ctx, "token", &sonarqube.UserTokenArgs{
//				LoginName: user.LoginName,
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("userToken", token.Token)
//			return nil
//		})
//	}
//
// ```
//
// ### Example: create an expiring global analysis token and output the token value
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			token, err := sonarqube.NewUserToken(ctx, "token", &sonarqube.UserTokenArgs{
//				Type:           pulumi.String("GLOBAL_ANALYSIS_TOKEN"),
//				ExpirationDate: pulumi.String("2099-01-01"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("globalAnalysisToken", token.Token)
//			return nil
//		})
//	}
//
// ```
//
// ### Example: create a project, project analysis token, and output the token value
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-xyz/sdk/go/sonarqube"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			token, err := sonarqube.NewUserToken(ctx, "token", &sonarqube.UserTokenArgs{
//				Type:       pulumi.String("PROJECT_ANALYSIS_TOKEN"),
//				ProjectKey: pulumi.String("my-project"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("projectAnalysisToken", token.Token)
//			return nil
//		})
//	}
//
// ```
type UserToken struct {
	pulumi.CustomResourceState

	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate pulumi.StringOutput `pulumi:"expirationDate"`
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrOutput `pulumi:"loginName"`
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey pulumi.StringPtrOutput `pulumi:"projectKey"`
	// The token value.
	Token pulumi.StringOutput `pulumi:"token"`
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewUserToken registers a new resource with the given unique name, arguments, and options.
func NewUserToken(ctx *pulumi.Context,
	name string, args *UserTokenArgs, opts ...pulumi.ResourceOption) (*UserToken, error) {
	if args == nil {
		args = &UserTokenArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserToken
	err := ctx.RegisterResource("sonarqube:index/userToken:UserToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserToken gets an existing UserToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserTokenState, opts ...pulumi.ResourceOption) (*UserToken, error) {
	var resource UserToken
	err := ctx.ReadResource("sonarqube:index/userToken:UserToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserToken resources.
type userTokenState struct {
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName *string `pulumi:"loginName"`
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey *string `pulumi:"projectKey"`
	// The token value.
	Token *string `pulumi:"token"`
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
	Type *string `pulumi:"type"`
}

type UserTokenState struct {
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate pulumi.StringPtrInput
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrInput
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey pulumi.StringPtrInput
	// The token value.
	Token pulumi.StringPtrInput
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
	Type pulumi.StringPtrInput
}

func (UserTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*userTokenState)(nil)).Elem()
}

type userTokenArgs struct {
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate *string `pulumi:"expirationDate"`
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName *string `pulumi:"loginName"`
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey *string `pulumi:"projectKey"`
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a UserToken resource.
type UserTokenArgs struct {
	// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
	ExpirationDate pulumi.StringPtrInput
	// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
	LoginName pulumi.StringPtrInput
	// The name of the Token to create. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
	ProjectKey pulumi.StringPtrInput
	// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
	Type pulumi.StringPtrInput
}

func (UserTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userTokenArgs)(nil)).Elem()
}

type UserTokenInput interface {
	pulumi.Input

	ToUserTokenOutput() UserTokenOutput
	ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput
}

func (*UserToken) ElementType() reflect.Type {
	return reflect.TypeOf((**UserToken)(nil)).Elem()
}

func (i *UserToken) ToUserTokenOutput() UserTokenOutput {
	return i.ToUserTokenOutputWithContext(context.Background())
}

func (i *UserToken) ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenOutput)
}

// UserTokenArrayInput is an input type that accepts UserTokenArray and UserTokenArrayOutput values.
// You can construct a concrete instance of `UserTokenArrayInput` via:
//
//	UserTokenArray{ UserTokenArgs{...} }
type UserTokenArrayInput interface {
	pulumi.Input

	ToUserTokenArrayOutput() UserTokenArrayOutput
	ToUserTokenArrayOutputWithContext(context.Context) UserTokenArrayOutput
}

type UserTokenArray []UserTokenInput

func (UserTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserToken)(nil)).Elem()
}

func (i UserTokenArray) ToUserTokenArrayOutput() UserTokenArrayOutput {
	return i.ToUserTokenArrayOutputWithContext(context.Background())
}

func (i UserTokenArray) ToUserTokenArrayOutputWithContext(ctx context.Context) UserTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenArrayOutput)
}

// UserTokenMapInput is an input type that accepts UserTokenMap and UserTokenMapOutput values.
// You can construct a concrete instance of `UserTokenMapInput` via:
//
//	UserTokenMap{ "key": UserTokenArgs{...} }
type UserTokenMapInput interface {
	pulumi.Input

	ToUserTokenMapOutput() UserTokenMapOutput
	ToUserTokenMapOutputWithContext(context.Context) UserTokenMapOutput
}

type UserTokenMap map[string]UserTokenInput

func (UserTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserToken)(nil)).Elem()
}

func (i UserTokenMap) ToUserTokenMapOutput() UserTokenMapOutput {
	return i.ToUserTokenMapOutputWithContext(context.Background())
}

func (i UserTokenMap) ToUserTokenMapOutputWithContext(ctx context.Context) UserTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTokenMapOutput)
}

type UserTokenOutput struct{ *pulumi.OutputState }

func (UserTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserToken)(nil)).Elem()
}

func (o UserTokenOutput) ToUserTokenOutput() UserTokenOutput {
	return o
}

func (o UserTokenOutput) ToUserTokenOutputWithContext(ctx context.Context) UserTokenOutput {
	return o
}

// The expiration date of the token being generated, in ISO 8601 format (YYYY-MM-DD). If not set, default to no expiration.
func (o UserTokenOutput) ExpirationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.ExpirationDate }).(pulumi.StringOutput)
}

// The login name of the User for which the token should be created. If not set, the token is created for the authenticated user. Changing this forces a new resource to be created.
func (o UserTokenOutput) LoginName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringPtrOutput { return v.LoginName }).(pulumi.StringPtrOutput)
}

// The name of the Token to create. Changing this forces a new resource to be created.
func (o UserTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The key of the only project that can be analyzed by the PROJECT_ANALYSIS TOKEN being created. Changing this forces a new resource to be created.
func (o UserTokenOutput) ProjectKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringPtrOutput { return v.ProjectKey }).(pulumi.StringPtrOutput)
}

// The token value.
func (o UserTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The kind of Token to create. Changing this forces a new resource to be created. Possible values are USER*TOKEN, GLOBAL*ANALYSIS*TOKEN, or PROJECT*ANALYSIS*TOKEN. Defaults to USER*TOKEN. If set to PROJECT*ANALYSIS*TOKEN, then the projectKey must also be specified.
func (o UserTokenOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserToken) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type UserTokenArrayOutput struct{ *pulumi.OutputState }

func (UserTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserToken)(nil)).Elem()
}

func (o UserTokenArrayOutput) ToUserTokenArrayOutput() UserTokenArrayOutput {
	return o
}

func (o UserTokenArrayOutput) ToUserTokenArrayOutputWithContext(ctx context.Context) UserTokenArrayOutput {
	return o
}

func (o UserTokenArrayOutput) Index(i pulumi.IntInput) UserTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserToken {
		return vs[0].([]*UserToken)[vs[1].(int)]
	}).(UserTokenOutput)
}

type UserTokenMapOutput struct{ *pulumi.OutputState }

func (UserTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserToken)(nil)).Elem()
}

func (o UserTokenMapOutput) ToUserTokenMapOutput() UserTokenMapOutput {
	return o
}

func (o UserTokenMapOutput) ToUserTokenMapOutputWithContext(ctx context.Context) UserTokenMapOutput {
	return o
}

func (o UserTokenMapOutput) MapIndex(k pulumi.StringInput) UserTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserToken {
		return vs[0].(map[string]*UserToken)[vs[1].(string)]
	}).(UserTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenInput)(nil)).Elem(), &UserToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenArrayInput)(nil)).Elem(), UserTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTokenMapInput)(nil)).Elem(), UserTokenMap{})
	pulumi.RegisterOutputType(UserTokenOutput{})
	pulumi.RegisterOutputType(UserTokenArrayOutput{})
	pulumi.RegisterOutputType(UserTokenMapOutput{})
}
