"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube User token resource. This can be used to manage Sonarqube User tokens.
 *
 * ## Example Usage
 *
 * ### Example: create a user, user token and output the token value
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const user = new sonarqube.User("user", {
 *     loginName: "terraform-test",
 *     password: "secret-sauce37!",
 * });
 * const token = new sonarqube.UserToken("token", {loginName: user.loginName});
 * export const userToken = token.token;
 * ```
 *
 * ### Example: create an expiring global analysis token and output the token value
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const token = new sonarqube.UserToken("token", {
 *     type: "GLOBAL_ANALYSIS_TOKEN",
 *     expirationDate: "2099-01-01",
 * });
 * export const globalAnalysisToken = token.token;
 * ```
 *
 * ### Example: create a project, project analysis token, and output the token value
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const token = new sonarqube.UserToken("token", {
 *     type: "PROJECT_ANALYSIS_TOKEN",
 *     projectKey: "my-project",
 * });
 * export const projectAnalysisToken = token.token;
 * ```
 */
class UserToken extends pulumi.CustomResource {
    /**
     * Get an existing UserToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserToken(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserToken.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectKey"] = state ? state.projectKey : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["expirationDate"] = args ? args.expirationDate : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectKey"] = args ? args.projectKey : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["token"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(UserToken.__pulumiType, name, resourceInputs, opts);
    }
}
exports.UserToken = UserToken;
/** @internal */
UserToken.__pulumiType = 'sonarqube:index/userToken:UserToken';
//# sourceMappingURL=userToken.js.map