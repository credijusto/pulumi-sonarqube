"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Setting = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube Settings resource. This can be used to manage Sonarqube settings.
 *
 * ## Example Usage
 *
 * ### Example: create a setting with multiple values
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const multiValueSetting = new sonarqube.Setting("multiValueSetting", {
 *     key: "sonar.global.exclusions",
 *     values: [
 *         "foo",
 *         "bar/**&#47;*.*",
 *     ],
 * });
 * ```
 *
 * ### Example: create a setting with multiple field values
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const multiFieldSetting = new sonarqube.Setting("multiFieldSetting", {
 *     key: "sonar.issue.ignore.multicriteria",
 *     fieldValues: [
 *         {
 *             ruleKey: "foo",
 *             resourceKey: "bar",
 *         },
 *         {
 *             ruleKey: "foo2",
 *             resourceKey: "bar2",
 *         },
 *     ],
 * });
 * ```
 */
class Setting extends pulumi.CustomResource {
    /**
     * Get an existing Setting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Setting(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Setting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Setting.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["fieldValues"] = state ? state.fieldValues : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["fieldValues"] = args ? args.fieldValues : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Setting.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Setting = Setting;
/** @internal */
Setting.__pulumiType = 'sonarqube:index/setting:Setting';
//# sourceMappingURL=setting.js.map