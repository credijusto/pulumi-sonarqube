"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GitlabBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube GitLab binding resource. This can be used to create and manage the binding between a
 * GitLab repository and a SonarQube project
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const gitlab_alm = new sonarqube.AlmGitlab("gitlab-alm", {
 *     key: "myalm",
 *     personalAccessToken: "my_personal_access_token",
 *     url: "https://gitlab.com/api/v4",
 * });
 * const main = new sonarqube.Project("main", {
 *     project: "my_project",
 *     visibility: "public",
 * });
 * const gitlab_binding = new sonarqube.GitlabBinding("gitlab-binding", {
 *     almSetting: gitlab_alm.key,
 *     project: "my_project",
 *     repository: "123",
 * });
 * ```
 */
class GitlabBinding extends pulumi.CustomResource {
    /**
     * Get an existing GitlabBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GitlabBinding(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GitlabBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GitlabBinding.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["almSetting"] = state ? state.almSetting : undefined;
            resourceInputs["monorepo"] = state ? state.monorepo : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["repository"] = state ? state.repository : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.almSetting === undefined) && !opts.urn) {
                throw new Error("Missing required property 'almSetting'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.repository === undefined) && !opts.urn) {
                throw new Error("Missing required property 'repository'");
            }
            resourceInputs["almSetting"] = args ? args.almSetting : undefined;
            resourceInputs["monorepo"] = args ? args.monorepo : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["repository"] = args ? args.repository : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GitlabBinding.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GitlabBinding = GitlabBinding;
/** @internal */
GitlabBinding.__pulumiType = 'sonarqube:index/gitlabBinding:GitlabBinding';
//# sourceMappingURL=gitlabBinding.js.map