"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = exports.Webhook = exports.UserToken = exports.UserExternalIdentity = exports.User = exports.Setting = exports.Rule = exports.QualityprofileProjectAssociation = exports.QualityprofileActivateRule = exports.Qualityprofile = exports.QualitygateUsergroupAssociation = exports.QualitygateProjectAssociation = exports.Qualitygate = exports.Provider = exports.ProjectMainBranch = exports.Project = exports.Portfolio = exports.Plugin = exports.Permissions = exports.PermissionTemplate = exports.NewCodePeriods = exports.GroupMember = exports.Group = exports.GitlabBinding = exports.GithubBinding = exports.getUserOutput = exports.getUser = exports.getRuleOutput = exports.getRule = exports.getQualityprofileOutput = exports.getQualityprofile = exports.getQualitygateOutput = exports.getQualitygate = exports.getProjectOutput = exports.getProject = exports.getPortfolioOutput = exports.getPortfolio = exports.getGroupOutput = exports.getGroup = exports.AzureBinding = exports.AlmGitlab = exports.AlmGithub = exports.AlmAzure = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.AlmAzure = null;
utilities.lazyLoad(exports, ["AlmAzure"], () => require("./almAzure"));
exports.AlmGithub = null;
utilities.lazyLoad(exports, ["AlmGithub"], () => require("./almGithub"));
exports.AlmGitlab = null;
utilities.lazyLoad(exports, ["AlmGitlab"], () => require("./almGitlab"));
exports.AzureBinding = null;
utilities.lazyLoad(exports, ["AzureBinding"], () => require("./azureBinding"));
exports.getGroup = null;
exports.getGroupOutput = null;
utilities.lazyLoad(exports, ["getGroup", "getGroupOutput"], () => require("./getGroup"));
exports.getPortfolio = null;
exports.getPortfolioOutput = null;
utilities.lazyLoad(exports, ["getPortfolio", "getPortfolioOutput"], () => require("./getPortfolio"));
exports.getProject = null;
exports.getProjectOutput = null;
utilities.lazyLoad(exports, ["getProject", "getProjectOutput"], () => require("./getProject"));
exports.getQualitygate = null;
exports.getQualitygateOutput = null;
utilities.lazyLoad(exports, ["getQualitygate", "getQualitygateOutput"], () => require("./getQualitygate"));
exports.getQualityprofile = null;
exports.getQualityprofileOutput = null;
utilities.lazyLoad(exports, ["getQualityprofile", "getQualityprofileOutput"], () => require("./getQualityprofile"));
exports.getRule = null;
exports.getRuleOutput = null;
utilities.lazyLoad(exports, ["getRule", "getRuleOutput"], () => require("./getRule"));
exports.getUser = null;
exports.getUserOutput = null;
utilities.lazyLoad(exports, ["getUser", "getUserOutput"], () => require("./getUser"));
exports.GithubBinding = null;
utilities.lazyLoad(exports, ["GithubBinding"], () => require("./githubBinding"));
exports.GitlabBinding = null;
utilities.lazyLoad(exports, ["GitlabBinding"], () => require("./gitlabBinding"));
exports.Group = null;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));
exports.GroupMember = null;
utilities.lazyLoad(exports, ["GroupMember"], () => require("./groupMember"));
exports.NewCodePeriods = null;
utilities.lazyLoad(exports, ["NewCodePeriods"], () => require("./newCodePeriods"));
exports.PermissionTemplate = null;
utilities.lazyLoad(exports, ["PermissionTemplate"], () => require("./permissionTemplate"));
exports.Permissions = null;
utilities.lazyLoad(exports, ["Permissions"], () => require("./permissions"));
exports.Plugin = null;
utilities.lazyLoad(exports, ["Plugin"], () => require("./plugin"));
exports.Portfolio = null;
utilities.lazyLoad(exports, ["Portfolio"], () => require("./portfolio"));
exports.Project = null;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));
exports.ProjectMainBranch = null;
utilities.lazyLoad(exports, ["ProjectMainBranch"], () => require("./projectMainBranch"));
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
exports.Qualitygate = null;
utilities.lazyLoad(exports, ["Qualitygate"], () => require("./qualitygate"));
exports.QualitygateProjectAssociation = null;
utilities.lazyLoad(exports, ["QualitygateProjectAssociation"], () => require("./qualitygateProjectAssociation"));
exports.QualitygateUsergroupAssociation = null;
utilities.lazyLoad(exports, ["QualitygateUsergroupAssociation"], () => require("./qualitygateUsergroupAssociation"));
exports.Qualityprofile = null;
utilities.lazyLoad(exports, ["Qualityprofile"], () => require("./qualityprofile"));
exports.QualityprofileActivateRule = null;
utilities.lazyLoad(exports, ["QualityprofileActivateRule"], () => require("./qualityprofileActivateRule"));
exports.QualityprofileProjectAssociation = null;
utilities.lazyLoad(exports, ["QualityprofileProjectAssociation"], () => require("./qualityprofileProjectAssociation"));
exports.Rule = null;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));
exports.Setting = null;
utilities.lazyLoad(exports, ["Setting"], () => require("./setting"));
exports.User = null;
utilities.lazyLoad(exports, ["User"], () => require("./user"));
exports.UserExternalIdentity = null;
utilities.lazyLoad(exports, ["UserExternalIdentity"], () => require("./userExternalIdentity"));
exports.UserToken = null;
utilities.lazyLoad(exports, ["UserToken"], () => require("./userToken"));
exports.Webhook = null;
utilities.lazyLoad(exports, ["Webhook"], () => require("./webhook"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "sonarqube:index/almAzure:AlmAzure":
                return new exports.AlmAzure(name, undefined, { urn });
            case "sonarqube:index/almGithub:AlmGithub":
                return new exports.AlmGithub(name, undefined, { urn });
            case "sonarqube:index/almGitlab:AlmGitlab":
                return new exports.AlmGitlab(name, undefined, { urn });
            case "sonarqube:index/azureBinding:AzureBinding":
                return new exports.AzureBinding(name, undefined, { urn });
            case "sonarqube:index/githubBinding:GithubBinding":
                return new exports.GithubBinding(name, undefined, { urn });
            case "sonarqube:index/gitlabBinding:GitlabBinding":
                return new exports.GitlabBinding(name, undefined, { urn });
            case "sonarqube:index/group:Group":
                return new exports.Group(name, undefined, { urn });
            case "sonarqube:index/groupMember:GroupMember":
                return new exports.GroupMember(name, undefined, { urn });
            case "sonarqube:index/newCodePeriods:NewCodePeriods":
                return new exports.NewCodePeriods(name, undefined, { urn });
            case "sonarqube:index/permissionTemplate:PermissionTemplate":
                return new exports.PermissionTemplate(name, undefined, { urn });
            case "sonarqube:index/permissions:Permissions":
                return new exports.Permissions(name, undefined, { urn });
            case "sonarqube:index/plugin:Plugin":
                return new exports.Plugin(name, undefined, { urn });
            case "sonarqube:index/portfolio:Portfolio":
                return new exports.Portfolio(name, undefined, { urn });
            case "sonarqube:index/project:Project":
                return new exports.Project(name, undefined, { urn });
            case "sonarqube:index/projectMainBranch:ProjectMainBranch":
                return new exports.ProjectMainBranch(name, undefined, { urn });
            case "sonarqube:index/qualitygate:Qualitygate":
                return new exports.Qualitygate(name, undefined, { urn });
            case "sonarqube:index/qualitygateProjectAssociation:QualitygateProjectAssociation":
                return new exports.QualitygateProjectAssociation(name, undefined, { urn });
            case "sonarqube:index/qualitygateUsergroupAssociation:QualitygateUsergroupAssociation":
                return new exports.QualitygateUsergroupAssociation(name, undefined, { urn });
            case "sonarqube:index/qualityprofile:Qualityprofile":
                return new exports.Qualityprofile(name, undefined, { urn });
            case "sonarqube:index/qualityprofileActivateRule:QualityprofileActivateRule":
                return new exports.QualityprofileActivateRule(name, undefined, { urn });
            case "sonarqube:index/qualityprofileProjectAssociation:QualityprofileProjectAssociation":
                return new exports.QualityprofileProjectAssociation(name, undefined, { urn });
            case "sonarqube:index/rule:Rule":
                return new exports.Rule(name, undefined, { urn });
            case "sonarqube:index/setting:Setting":
                return new exports.Setting(name, undefined, { urn });
            case "sonarqube:index/user:User":
                return new exports.User(name, undefined, { urn });
            case "sonarqube:index/userExternalIdentity:UserExternalIdentity":
                return new exports.UserExternalIdentity(name, undefined, { urn });
            case "sonarqube:index/userToken:UserToken":
                return new exports.UserToken(name, undefined, { urn });
            case "sonarqube:index/webhook:Webhook":
                return new exports.Webhook(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sonarqube", "index/almAzure", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/almGithub", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/almGitlab", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/azureBinding", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/githubBinding", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/gitlabBinding", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/group", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/groupMember", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/newCodePeriods", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/permissionTemplate", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/permissions", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/plugin", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/portfolio", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/project", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/projectMainBranch", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygate", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygateProjectAssociation", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualitygateUsergroupAssociation", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofile", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofileActivateRule", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/qualityprofileProjectAssociation", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/rule", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/setting", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/user", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/userExternalIdentity", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/userToken", _module);
pulumi.runtime.registerResourceModule("sonarqube", "index/webhook", _module);
pulumi.runtime.registerResourcePackage("sonarqube", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:sonarqube") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map