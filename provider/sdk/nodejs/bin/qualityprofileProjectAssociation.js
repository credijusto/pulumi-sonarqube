"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QualityprofileProjectAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube Quality Profile Project association resource. This can be used to associate a Quality Profile to a Project
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const mainQualityprofile = new sonarqube.Qualityprofile("mainQualityprofile", {language: "js"});
 * const mainProject = new sonarqube.Project("mainProject", {
 *     project: "my_project",
 *     visibility: "public",
 * });
 * const mainQualityprofileProjectAssociation = new sonarqube.QualityprofileProjectAssociation("mainQualityprofileProjectAssociation", {
 *     qualityProfile: mainQualityprofile.name,
 *     project: mainProject.project,
 *     language: "js",
 * });
 * ```
 */
class QualityprofileProjectAssociation extends pulumi.CustomResource {
    /**
     * Get an existing QualityprofileProjectAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QualityprofileProjectAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of QualityprofileProjectAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualityprofileProjectAssociation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["qualityProfile"] = state ? state.qualityProfile : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.language === undefined) && !opts.urn) {
                throw new Error("Missing required property 'language'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            if ((!args || args.qualityProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfile'");
            }
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["qualityProfile"] = args ? args.qualityProfile : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualityprofileProjectAssociation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.QualityprofileProjectAssociation = QualityprofileProjectAssociation;
/** @internal */
QualityprofileProjectAssociation.__pulumiType = 'sonarqube:index/qualityprofileProjectAssociation:QualityprofileProjectAssociation';
//# sourceMappingURL=qualityprofileProjectAssociation.js.map