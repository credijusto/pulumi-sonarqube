"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlmGitlab = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube GitLab Alm/Devops Platform Integration resource. This can be used to create and manage a Alm/Devops
 * Platform Integration for GitLab.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const gitlab_alm = new sonarqube.AlmGitlab("gitlab-alm", {
 *     key: "myalm",
 *     personalAccessToken: "my_personal_access_token",
 *     url: "https://gitlab.com/api/v4",
 * });
 * ```
 */
class AlmGitlab extends pulumi.CustomResource {
    /**
     * Get an existing AlmGitlab resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlmGitlab(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlmGitlab.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlmGitlab.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["personalAccessToken"] = state ? state.personalAccessToken : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.personalAccessToken === undefined) && !opts.urn) {
                throw new Error("Missing required property 'personalAccessToken'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["personalAccessToken"] = (args === null || args === void 0 ? void 0 : args.personalAccessToken) ? pulumi.secret(args.personalAccessToken) : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["personalAccessToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(AlmGitlab.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AlmGitlab = AlmGitlab;
/** @internal */
AlmGitlab.__pulumiType = 'sonarqube:index/almGitlab:AlmGitlab';
//# sourceMappingURL=almGitlab.js.map