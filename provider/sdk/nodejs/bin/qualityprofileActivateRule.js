"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.QualityprofileActivateRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Provides a Sonarqube Rules resource. This can be used to manage Sonarqube rules.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * const allowedMavenDependencies = new sonarqube.Rule("allowedMavenDependencies", {
 *     customKey: "Only_use_allowed_Maven_dependencies",
 *     markdownDescription: "Description",
 *     params: "FilePattern=**&#47;pom.xml",
 *     severity: "BLOCKER",
 *     status: "READY",
 *     templateKey: "xml:XPathCheck",
 *     type: "VULNERABILITY",
 * });
 * const xml = new sonarqube.Qualityprofile("xml", {
 *     language: "xml",
 *     isDefault: false,
 *     parent: "Sonar way",
 * });
 * const xmlRule = new sonarqube.QualityprofileActivateRule("xmlRule", {
 *     key: xml.key,
 *     rule: allowedMavenDependencies.id,
 *     severity: "BLOCKER",
 * });
 * ```
 */
class QualityprofileActivateRule extends pulumi.CustomResource {
    /**
     * Get an existing QualityprofileActivateRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new QualityprofileActivateRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of QualityprofileActivateRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QualityprofileActivateRule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
            resourceInputs["reset"] = state ? state.reset : undefined;
            resourceInputs["rule"] = state ? state.rule : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            if ((!args || args.rule === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rule'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
            resourceInputs["reset"] = args ? args.reset : undefined;
            resourceInputs["rule"] = args ? args.rule : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(QualityprofileActivateRule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.QualityprofileActivateRule = QualityprofileActivateRule;
/** @internal */
QualityprofileActivateRule.__pulumiType = 'sonarqube:index/qualityprofileActivateRule:QualityprofileActivateRule';
//# sourceMappingURL=qualityprofileActivateRule.js.map