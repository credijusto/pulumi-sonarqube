"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserExternalIdentity = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Updates the _external identity_ of a _non local_ Sonarqube User. This can be used to set the _Identity Provider_ which should be used to
 * authenticate a specific user.
 *
 * The Sonarqube API currently does not provide an endpoint to read the _external identity_ setting of an user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sonarqube from "@pulumi/sonarqube";
 *
 * //# Example: change the external identity to SAML
 * const remoteUserUser = new sonarqube.User("remoteUserUser", {
 *     loginName: "terraform-test",
 *     email: "terraform-test@sonarqube.com",
 *     isLocal: false,
 * });
 * const remoteUserUserExternalIdentity = new sonarqube.UserExternalIdentity("remoteUserUserExternalIdentity", {
 *     loginName: remoteUserUser.loginName,
 *     externalIdentity: "terraform-test@sonarqube.com",
 *     externalProvider: "saml",
 * });
 * ```
 */
class UserExternalIdentity extends pulumi.CustomResource {
    /**
     * Get an existing UserExternalIdentity resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserExternalIdentity(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserExternalIdentity.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserExternalIdentity.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["externalIdentity"] = state ? state.externalIdentity : undefined;
            resourceInputs["externalProvider"] = state ? state.externalProvider : undefined;
            resourceInputs["loginName"] = state ? state.loginName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.externalIdentity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalIdentity'");
            }
            if ((!args || args.externalProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'externalProvider'");
            }
            if ((!args || args.loginName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loginName'");
            }
            resourceInputs["externalIdentity"] = args ? args.externalIdentity : undefined;
            resourceInputs["externalProvider"] = args ? args.externalProvider : undefined;
            resourceInputs["loginName"] = args ? args.loginName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserExternalIdentity.__pulumiType, name, resourceInputs, opts);
    }
}
exports.UserExternalIdentity = UserExternalIdentity;
/** @internal */
UserExternalIdentity.__pulumiType = 'sonarqube:index/userExternalIdentity:UserExternalIdentity';
//# sourceMappingURL=userExternalIdentity.js.map