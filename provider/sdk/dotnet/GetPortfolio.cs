// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    public static class GetPortfolio
    {
        /// <summary>
        /// Use this data source to get a Sonarqube portfolio resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sonarqube = Pulumi.Sonarqube;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var portfolio = Sonarqube.GetPortfolio.Invoke(new()
        ///     {
        ///         Key = "portfolio-key",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPortfolioResult> InvokeAsync(GetPortfolioArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPortfolioResult>("sonarqube:index/getPortfolio:getPortfolio", args ?? new GetPortfolioArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a Sonarqube portfolio resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sonarqube = Pulumi.Sonarqube;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var portfolio = Sonarqube.GetPortfolio.Invoke(new()
        ///     {
        ///         Key = "portfolio-key",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPortfolioResult> Invoke(GetPortfolioInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPortfolioResult>("sonarqube:index/getPortfolio:getPortfolio", args ?? new GetPortfolioInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get a Sonarqube portfolio resource
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sonarqube = Pulumi.Sonarqube;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var portfolio = Sonarqube.GetPortfolio.Invoke(new()
        ///     {
        ///         Key = "portfolio-key",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPortfolioResult> Invoke(GetPortfolioInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPortfolioResult>("sonarqube:index/getPortfolio:getPortfolio", args ?? new GetPortfolioInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPortfolioArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The key of the portfolio
        /// </summary>
        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public GetPortfolioArgs()
        {
        }
        public static new GetPortfolioArgs Empty => new GetPortfolioArgs();
    }

    public sealed class GetPortfolioInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The key of the portfolio
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public GetPortfolioInvokeArgs()
        {
        }
        public static new GetPortfolioInvokeArgs Empty => new GetPortfolioInvokeArgs();
    }


    [OutputType]
    public sealed class GetPortfolioResult
    {
        /// <summary>
        /// Which branch is analyzed
        /// </summary>
        public readonly string Branch;
        /// <summary>
        /// Description of the portfolio
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The key of the portfolio
        /// </summary>
        public readonly string Key;
        /// <summary>
        /// Name of the portfolio
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// `VW` (portfolios always have this qualifier)
        /// </summary>
        public readonly string Qualifier;
        /// <summary>
        /// The regular expression used to populate the portfolio. Only active when `selection_mode` is `REGEXP`
        /// </summary>
        public readonly string Regexp;
        /// <summary>
        /// How the Portfolio is populated. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
        /// </summary>
        public readonly string SelectionMode;
        /// <summary>
        /// The list of tags used to populate the Portfolio. Only active when `selection_mode` is `TAGS`
        /// </summary>
        public readonly ImmutableArray<string> Tags;
        /// <summary>
        /// Portfolio visibility
        /// </summary>
        public readonly string Visibility;

        [OutputConstructor]
        private GetPortfolioResult(
            string branch,

            string description,

            string id,

            string key,

            string name,

            string qualifier,

            string regexp,

            string selectionMode,

            ImmutableArray<string> tags,

            string visibility)
        {
            Branch = branch;
            Description = description;
            Id = id;
            Key = key;
            Name = name;
            Qualifier = qualifier;
            Regexp = regexp;
            SelectionMode = selectionMode;
            Tags = tags;
            Visibility = visibility;
        }
    }
}
