// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// Provides a Sonarqube New Code Periods resource. This can be used to manage Sonarqube New Code Periods.
    /// 
    /// ## Example Usage
    /// 
    /// ### Example: Set the global new code period to a number of days
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var codePeriod = new Sonarqube.NewCodePeriods("codePeriod", new()
    ///     {
    ///         Type = "NUMBER_OF_DAYS",
    ///         Value = "7",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/newCodePeriods:NewCodePeriods")]
    public partial class NewCodePeriods : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of a branch of a project for which the new code period will be configured. Changing this will force a new resource to be created. Setting this also requires setting the 'project' argument.
        /// </summary>
        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        /// <summary>
        /// The key of a project for which the new code period will be configured. Changing this will force a new resource to be created.
        /// </summary>
        [Output("project")]
        public Output<string?> Project { get; private set; } = null!;

        /// <summary>
        /// The kind of new code period to use. Supported values are SPECIFIC*ANALYSIS, PREVIOUS*VERSION, NUMBER*OF*DAYS, or REFERENCE_BRANCH.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The desired value of the new code period. Varies based on the 'type'. For SPECIFIC*ANALYIS, the value must be the UUID of a previous analysis. For NUMBER*OF*DAYS it must be a numeric string. For REFERENCE*BRANCH it should be the name of branch on the project. For PREVIOUS_VERSION it must **not** be set.
        /// </summary>
        [Output("value")]
        public Output<string?> Value { get; private set; } = null!;


        /// <summary>
        /// Create a NewCodePeriods resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NewCodePeriods(string name, NewCodePeriodsArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/newCodePeriods:NewCodePeriods", name, args ?? new NewCodePeriodsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NewCodePeriods(string name, Input<string> id, NewCodePeriodsState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/newCodePeriods:NewCodePeriods", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NewCodePeriods resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NewCodePeriods Get(string name, Input<string> id, NewCodePeriodsState? state = null, CustomResourceOptions? options = null)
        {
            return new NewCodePeriods(name, id, state, options);
        }
    }

    public sealed class NewCodePeriodsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of a branch of a project for which the new code period will be configured. Changing this will force a new resource to be created. Setting this also requires setting the 'project' argument.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// The key of a project for which the new code period will be configured. Changing this will force a new resource to be created.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The kind of new code period to use. Supported values are SPECIFIC*ANALYSIS, PREVIOUS*VERSION, NUMBER*OF*DAYS, or REFERENCE_BRANCH.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The desired value of the new code period. Varies based on the 'type'. For SPECIFIC*ANALYIS, the value must be the UUID of a previous analysis. For NUMBER*OF*DAYS it must be a numeric string. For REFERENCE*BRANCH it should be the name of branch on the project. For PREVIOUS_VERSION it must **not** be set.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public NewCodePeriodsArgs()
        {
        }
        public static new NewCodePeriodsArgs Empty => new NewCodePeriodsArgs();
    }

    public sealed class NewCodePeriodsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of a branch of a project for which the new code period will be configured. Changing this will force a new resource to be created. Setting this also requires setting the 'project' argument.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// The key of a project for which the new code period will be configured. Changing this will force a new resource to be created.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The kind of new code period to use. Supported values are SPECIFIC*ANALYSIS, PREVIOUS*VERSION, NUMBER*OF*DAYS, or REFERENCE_BRANCH.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The desired value of the new code period. Varies based on the 'type'. For SPECIFIC*ANALYIS, the value must be the UUID of a previous analysis. For NUMBER*OF*DAYS it must be a numeric string. For REFERENCE*BRANCH it should be the name of branch on the project. For PREVIOUS_VERSION it must **not** be set.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        public NewCodePeriodsState()
        {
        }
        public static new NewCodePeriodsState Empty => new NewCodePeriodsState();
    }
}
