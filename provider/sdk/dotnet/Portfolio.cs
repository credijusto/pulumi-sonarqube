// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sonarqube
{
    /// <summary>
    /// Provides a Sonarqube Portfolio resource. This can be used to create and manage Sonarqube Portfolio. Note that the SonarQube API for Portfolios is called ``views``
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sonarqube = Pulumi.Sonarqube;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Sonarqube.Portfolio("main", new()
    ///     {
    ///         Description = "portfolio-description",
    ///         Key = "portfolio-key",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [SonarqubeResourceType("sonarqube:index/portfolio:Portfolio")]
    public partial class Portfolio : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Which branch to analyze. If nothing, or '' is specified, the main branch is used.
        /// </summary>
        [Output("branch")]
        public Output<string?> Branch { get; private set; } = null!;

        /// <summary>
        /// A description of the Portfolio to create
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The key of the Portfolio to create
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The name of the Portfolio to create
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("qualifier")]
        public Output<string> Qualifier { get; private set; } = null!;

        /// <summary>
        /// A regular expression that is used to match Projects with a matching name OR key. If they match, they are added to the Portfolio
        /// </summary>
        [Output("regexp")]
        public Output<string?> Regexp { get; private set; } = null!;

        /// <summary>
        /// A set of projects to add to the portfolio.
        /// </summary>
        [Output("selectedProjects")]
        public Output<ImmutableArray<Outputs.PortfolioSelectedProject>> SelectedProjects { get; private set; } = null!;

        /// <summary>
        /// How to populate the Portfolio to create. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
        /// </summary>
        [Output("selectionMode")]
        public Output<string?> SelectionMode { get; private set; } = null!;

        /// <summary>
        /// List of Project tags to populate the Portfolio from. Only active when `selection_mode` is `TAGS`
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Whether the created portfolio should be visible to everyone, or only specific user/groups. If no visibility is specified, the default portfolio visibility will be `public`.
        /// </summary>
        [Output("visibility")]
        public Output<string?> Visibility { get; private set; } = null!;


        /// <summary>
        /// Create a Portfolio resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Portfolio(string name, PortfolioArgs args, CustomResourceOptions? options = null)
            : base("sonarqube:index/portfolio:Portfolio", name, args ?? new PortfolioArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Portfolio(string name, Input<string> id, PortfolioState? state = null, CustomResourceOptions? options = null)
            : base("sonarqube:index/portfolio:Portfolio", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Portfolio resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Portfolio Get(string name, Input<string> id, PortfolioState? state = null, CustomResourceOptions? options = null)
        {
            return new Portfolio(name, id, state, options);
        }
    }

    public sealed class PortfolioArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Which branch to analyze. If nothing, or '' is specified, the main branch is used.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A description of the Portfolio to create
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The key of the Portfolio to create
        /// </summary>
        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        /// <summary>
        /// The name of the Portfolio to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A regular expression that is used to match Projects with a matching name OR key. If they match, they are added to the Portfolio
        /// </summary>
        [Input("regexp")]
        public Input<string>? Regexp { get; set; }

        [Input("selectedProjects")]
        private InputList<Inputs.PortfolioSelectedProjectArgs>? _selectedProjects;

        /// <summary>
        /// A set of projects to add to the portfolio.
        /// </summary>
        public InputList<Inputs.PortfolioSelectedProjectArgs> SelectedProjects
        {
            get => _selectedProjects ?? (_selectedProjects = new InputList<Inputs.PortfolioSelectedProjectArgs>());
            set => _selectedProjects = value;
        }

        /// <summary>
        /// How to populate the Portfolio to create. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
        /// </summary>
        [Input("selectionMode")]
        public Input<string>? SelectionMode { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of Project tags to populate the Portfolio from. Only active when `selection_mode` is `TAGS`
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the created portfolio should be visible to everyone, or only specific user/groups. If no visibility is specified, the default portfolio visibility will be `public`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public PortfolioArgs()
        {
        }
        public static new PortfolioArgs Empty => new PortfolioArgs();
    }

    public sealed class PortfolioState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Which branch to analyze. If nothing, or '' is specified, the main branch is used.
        /// </summary>
        [Input("branch")]
        public Input<string>? Branch { get; set; }

        /// <summary>
        /// A description of the Portfolio to create
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The key of the Portfolio to create
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// The name of the Portfolio to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("qualifier")]
        public Input<string>? Qualifier { get; set; }

        /// <summary>
        /// A regular expression that is used to match Projects with a matching name OR key. If they match, they are added to the Portfolio
        /// </summary>
        [Input("regexp")]
        public Input<string>? Regexp { get; set; }

        [Input("selectedProjects")]
        private InputList<Inputs.PortfolioSelectedProjectGetArgs>? _selectedProjects;

        /// <summary>
        /// A set of projects to add to the portfolio.
        /// </summary>
        public InputList<Inputs.PortfolioSelectedProjectGetArgs> SelectedProjects
        {
            get => _selectedProjects ?? (_selectedProjects = new InputList<Inputs.PortfolioSelectedProjectGetArgs>());
            set => _selectedProjects = value;
        }

        /// <summary>
        /// How to populate the Portfolio to create. Possible values are `NONE`, `MANUAL`, `TAGS`, `REGEXP` or `REST`. [See docs](https://docs.sonarqube.org/9.8/project-administration/managing-portfolios/#populating-portfolios) for how Portfolio population works
        /// </summary>
        [Input("selectionMode")]
        public Input<string>? SelectionMode { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// List of Project tags to populate the Portfolio from. Only active when `selection_mode` is `TAGS`
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Whether the created portfolio should be visible to everyone, or only specific user/groups. If no visibility is specified, the default portfolio visibility will be `public`.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public PortfolioState()
        {
        }
        public static new PortfolioState Empty => new PortfolioState();
    }
}
